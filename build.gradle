apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'maven'
//java
sourceCompatibility=1.6
//war
war.baseName='lnramirez'
//jetty
jettyRun.scanIntervalSeconds=1
jettyRun.httpPort=8282
jettyRun.stopPort=8081
jettyRun.stopKey='s'
//project
group='com.bajoneando.lnramirez'
version='0.1.2-SNAPSHOT'
description='Official lnramirez site'
//dependencies
//versions
springVersion = '3.1.1.RELEASE'
springMongoVersion = '1.0.1.RELEASE'
jacksonVersion = '1.6.0'
xstreamVersion = '1.3.1'

junitVersion = '4.8.2'
//repositories
repositories {
    mavenCentral()
    mavenRepo urls: [
        "http://repo.springsource.org/libs-release",
        "http://scala-tools.org/repo-releases"]
}
//dependencies
dependencies {
    
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework.data:spring-data-mongodb:$springMongoVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-oxm:$springVersion"
    compile "com.thoughtworks.xstream:xstream:$xstreamVersion"
    compile "org.codehaus.jackson:jackson-jaxrs:$jacksonVersion"
    compile "jstl:jstl:1.1.2"
    compile "taglibs:standard:1.1.2"
    compile "org.markdownj:markdownj:0.3.0-1.0.2b4"
    
    providedCompile "javax.servlet:servlet-api:2.5"
    providedCompile "javax.servlet.jsp:jsp-api:2.1"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.springframework:spring-test:$springVersion"

    runtime "org.tuckey:urlrewritefilter:3.2.0"
    runtime "opensymphony:sitemesh:2.4.2"
}

//tasks
task createDirSources << {
    sourceSets.all {
        (java.srcDirs + resources.srcDirs + webAppDir).each { _srcDir ->
            if (!_srcDir.exists()) {
                println("mkdirs ${_srcDir.canonicalPath}")
                _srcDir.mkdirs()
            }
        }
    }   
}

//maven 
task copyPomFiles (dependsOn: 'install') << {
    println "copying build/poms/pom-default.xml to pom.xml"
    ant.copy(file: "build/poms/pom-default.xml", tofile: "pom.xml")
    println "copied"
}

optionalDeps = []
providedDeps = []

optional = { optionalDeps << it }
provided = { providedDeps << it }

install {
    repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

def customizePom(pom, gradleProject) {
    pom.whenConfigured { generatedPom ->
        // respect 'optional' and 'provided' dependencies
        gradleProject.optionalDeps.each { dep ->
            generatedPom.dependencies.find { it.artifactId == dep.name }?.optional = true
        }
        gradleProject.providedDeps.each { dep ->
            generatedPom.dependencies.find { it.artifactId == dep.name }?.scope = 'provided'
        }

        // eliminate test-scoped dependencies (no need in maven central poms)
        generatedPom.dependencies.removeAll { dep ->
            dep.scope == 'test'
        }

        // add all items necessary for maven central publication
        generatedPom.project {
            name = gradleProject.description
            description = gradleProject.description
            organization {
                name = 'bajoneando'
            }
            build {
                plugins {
                    plugin {
                        groupId = 'org.apache.maven.plugins'
                        artifactId = 'maven-compiler-plugin'
                        configuration {
                            source = '1.6'
                            target = '1.6'
                        }
                    }
                    plugin {
                        groupId = 'org.apache.maven.plugins'
                        artifactId = 'maven-surefire-plugin'
                        configuration {
                            includes {
                                include = '**/*Tests.java'
                            }
                            excludes {
                                exclude = '**/*Abstract*.java'
                            }
                        }
                    }
                }
                resources {
                    resource {
                        directory = 'src/main/java'
                        includes = ['**/*']
                        excludes = ['**/*.java']
                    }
                    resource {
                        directory = 'src/main/resources'
                        includes = ['**/*']
                    }
                }
                testResources {
                    testResource {
                        directory = 'src/test/java'
                        includes = ['**/*']
                        excludes = ['**/*.java']
                    }
                    testResource {
                        directory = 'src/test/resources'
                        includes = ['**/*']
                    }
                }
            }
            developers {
                developer {
                    id = 'lnramirez'
                    name = 'Luis Ramirez Monterosa'
                    email = 'lnramirez@gmail.com'
                }
            }
        }
    }
}    